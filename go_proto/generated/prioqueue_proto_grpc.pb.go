// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: prioqueue_proto.go_proto

package prioqueue

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueueOpsClient is the client API for QueueOps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueOpsClient interface {
	AddJobToQueue(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*AddJobReply, error)
	GetJobsFromQueue(ctx context.Context, in *GetNJobs, opts ...grpc.CallOption) (*GetNJobsReply, error)
}

type queueOpsClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueOpsClient(cc grpc.ClientConnInterface) QueueOpsClient {
	return &queueOpsClient{cc}
}

func (c *queueOpsClient) AddJobToQueue(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*AddJobReply, error) {
	out := new(AddJobReply)
	err := c.cc.Invoke(ctx, "/_proto.QueueOps/addJobToQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueOpsClient) GetJobsFromQueue(ctx context.Context, in *GetNJobs, opts ...grpc.CallOption) (*GetNJobsReply, error) {
	out := new(GetNJobsReply)
	err := c.cc.Invoke(ctx, "/_proto.QueueOps/getJobsFromQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueOpsServer is the server API for QueueOps service.
// All implementations must embed UnimplementedQueueOpsServer
// for forward compatibility
type QueueOpsServer interface {
	AddJobToQueue(context.Context, *AddJobRequest) (*AddJobReply, error)
	GetJobsFromQueue(context.Context, *GetNJobs) (*GetNJobsReply, error)
	mustEmbedUnimplementedQueueOpsServer()
}

// UnimplementedQueueOpsServer must be embedded to have forward compatible implementations.
type UnimplementedQueueOpsServer struct {
}

func (UnimplementedQueueOpsServer) AddJobToQueue(context.Context, *AddJobRequest) (*AddJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJobToQueue not implemented")
}
func (UnimplementedQueueOpsServer) GetJobsFromQueue(context.Context, *GetNJobs) (*GetNJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobsFromQueue not implemented")
}
func (UnimplementedQueueOpsServer) mustEmbedUnimplementedQueueOpsServer() {}

// UnsafeQueueOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueOpsServer will
// result in compilation errors.
type UnsafeQueueOpsServer interface {
	mustEmbedUnimplementedQueueOpsServer()
}

func RegisterQueueOpsServer(s grpc.ServiceRegistrar, srv QueueOpsServer) {
	s.RegisterService(&QueueOps_ServiceDesc, srv)
}

func _QueueOps_AddJobToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueOpsServer).AddJobToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_proto.QueueOps/addJobToQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueOpsServer).AddJobToQueue(ctx, req.(*AddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueOps_GetJobsFromQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNJobs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueOpsServer).GetJobsFromQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/_proto.QueueOps/getJobsFromQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueOpsServer).GetJobsFromQueue(ctx, req.(*GetNJobs))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueOps_ServiceDesc is the grpc.ServiceDesc for QueueOps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueOps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "_proto.QueueOps",
	HandlerType: (*QueueOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addJobToQueue",
			Handler:    _QueueOps_AddJobToQueue_Handler,
		},
		{
			MethodName: "getJobsFromQueue",
			Handler:    _QueueOps_GetJobsFromQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prioqueue_proto.go_proto",
}
